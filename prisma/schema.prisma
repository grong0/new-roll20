datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider             = "prisma-client-py"
    recursive_type_depth = 5
}

model DamageType {
    id     Int      @id @default(autoincrement())
    name   String
    desc   String[]
    Damage Damage[]
}

model AbilityScore {
    id       Int      @id @default(autoincrement())
    name     String
    fullName String
    desc     String[]
    skills   Skill[]
    dcs      DC[]
}

model Alignment {
    id           Int    @id @default(autoincrement())
    name         String
    abbreviation String
    desc         String
    races        Race[]
}

model Condition {
    id   Int      @id @default(autoincrement())
    name String
    desc String[]
}

model Skill {
    id             Int          @id @default(autoincrement())
    name           String
    desc           String[]
    abilityScore   AbilityScore @relation(fields: [abilityScoreId], references: [id])
    abilityScoreId Int
}

model DamageAtPlayerLevel {
    id       Int    @id @default(autoincrement())
    level_1  String
    level_2  String
    level_3  String
    level_4  String
    level_5  String
    level_6  String
    level_7  String
    level_8  String
    level_9  String
    level_10 String
    level_11 String
    level_12 String
    level_13 String
    level_14 String
    level_15 String
    level_16 String
    level_17 String
    level_18 String
    level_19 String
    level_20 String
    damage   Damage @relation(fields: [damageId], references: [id])
    damageId Int    @unique
}

model DC {
    id             Int          @id @default(autoincrement())
    abilityScore   AbilityScore @relation(fields: [abilityScoreId], references: [id])
    abilityScoreId Int
    dcSuccess      String
    Spell          Spell[]
}

model School {
    id     Int     @id @default(autoincrement())
    name   String
    desc   String
    spells Spell[]
}

model RuleSection {
    id     Int    @id @default(autoincrement())
    name   String
    desc   String
    rule   Rule   @relation(fields: [ruleId], references: [id])
    ruleId Int
}

model Rule {
    id          Int           @id @default(autoincrement())
    name        String
    desc        String
    subsections RuleSection[]
}

model WeaponProperty {
    id   Int      @id @default(autoincrement())
    name String
    desc String[]
}

model Spell {
    id            Int      @id @default(autoincrement())
    name          String
    desc          String[]
    higherLevel   String[]
    range         String
    verbal        Boolean
    somatic       Boolean
    material      String
    ritual        Boolean
    duration      String
    concentration Boolean
    castingTime   String
    level         Int
    damage        Damage?
    dc            DC       @relation(fields: [dcId], references: [id])
    dcId          Int
    school        School   @relation(fields: [schoolId], references: [id])
    schoolId      Int
    // classes       Class[]
}

model Proficiency {
    id   Int    @id @default(autoincrement())
    type String
    name String
    // classes Class[]
    // races   Race[]
}

model EquipmentCategory {
    id        Int                     @id @default(autoincrement())
    name      String
    equipment CategoriesOnEquipment[]
}

model Equipment {
    id                  Int                     @id @default(autoincrement())
    name                String
    special             String[]
    equipmentCategories CategoriesOnEquipment[]
}

model CategoriesOnEquipment {
    equipment           Equipment         @relation(fields: [equipmentId], references: [id])
    equipmentId         Int
    equipmentCategory   EquipmentCategory @relation(fields: [equipmentCategoryId], references: [id])
    equipmentCategoryId Int

    @@id([equipmentId, equipmentCategoryId])
}

// model EquipmentChoiceArray {
//     id     Int      @id @default(autoincrement())
//     desc   String[]
//     amount Int
//     type   String
//     choices Equipment[]
// }

// model ProficiencyChoiceArray {
//     id      Int           @id @default(autoincrement())
//     desc    String[]
//     amount  Int
//     type    String
//     choices Proficiency[]
// }

// model MultiClass {
//     id Int @id @default(autoincrement())
//     prerequisites AbilityScore[]
//     proficiencies Proficiency[]
//     class Class @relation(fields: [classId], references: [id])
//     classId Int
// }

// model Feat {
//     id Int @id @default(autoincrement())
//     name String
//     level Int
//     prerequisites String[]
//     desc String[]
//     classLevel ClassLevel? @relation(fields: [classLevelId], references: [id])
//     classLevelId Int?
//     subclassLevel SubClassLevel? @relation(fields: [subclassLevelId], references: [id])
//     subclassLevelId Int?
// }

// model SpellCasting {
//     id Int @id @default(autoincrement())
//     cantripsKnown Int
//     spellSlotsLevel1 Int
//     spellSlotsLevel2 Int
//     spellSlotsLevel3 Int
//     spellSlotsLevel4 Int
//     spellSlotsLevel5 Int
//     spellSlotsLevel6 Int
//     spellSlotsLevel7 Int
//     spellSlotsLevel8 Int
//     spellSlotsLevel9 Int
//     classLevel ClassLevel @relation(fields: [classLevelId], references: [id])
//     classLevelId Int @unique
// }

// model ClassSpecific {
//     id Int @id @default(autoincrement())
//     name String
//     amount Int
//     classLevel ClassLevel @relation(fields: [classLevelId], references: [id])
//     classLevelId Int
// }

// model ClassLevel {
//     id Int @id @default(autoincrement())
//     level Int
//     abilityScoreBonuses Int
//     profBonus Int
//     features Feat[]
//     spellCasting SpellCasting
//     classSpecfic ClassSpecific[]
//     class Class @relation(fields: [classId], references: [id])
//     classId Int
// }

// model SubClassLevel {
//     id Int @id @default(autoincrement())
//     level Int
//     features Feat[]
//     subClass SubClass @relation(fields: [subClassId], references: [id])
//     subClassId Int
// }

// model SubClass {
//     id Int @id @default(autoincrement())
//     class Class @relation(fields: [classId], references: [id])
//     classId Int
//     name String
//     subclassFlavor String
//     desc String[]
//     levels SubClassLevel[]
//     spells Spell[]
// }

// model Class {
//     id                       Int                    @id @default(autoincrement())
//     name                     String
//     hitDie                   Int
//     proficiencyChoices       ProficiencyChoiceArray
//     proficiencies            Proficiency[]
//     savingThrows             AbilityScore[]
//     startingEquipment        Equipment[]
//     startingEquipemntCount   Int
//     startingEquipmentChoices EquipmentChoiceArray[]
//     classLevels ClassLevel[]
//     multiClassing MultiClass
//     subclasses SubClass[]
// }

model Damage {
    id                  Int                  @id @default(autoincrement())
    damageType          DamageType           @relation(fields: [damageTypeId], references: [id])
    damageTypeId        Int
    damageAtPlayerLevel DamageAtPlayerLevel?
    spell               Spell                @relation(fields: [spellId], references: [id])
    spellId             Int                  @unique
}

model RaceTable {
    id     Int            @id @default(autoincrement())
    name   String
    rows   RaceTableRow[]
    race   Race           @relation(fields: [raceId], references: [id])
    raceId Int
}

model RaceTableRow {
    id      Int       @id @default(autoincrement())
    content String[]
    table   RaceTable @relation(fields: [tableId], references: [id])
    tableId Int
}

model FeatTable {
    id     Int            @id @default(autoincrement())
    name   String
    rows   FeatTableRow[]
    feat   Feat           @relation(fields: [featId], references: [id])
    featId Int            @unique
}

model FeatTableRow {
    id      Int       @id @default(autoincrement())
    content String[]
    table   FeatTable @relation(fields: [tableId], references: [id])
    tableId Int
}

model Feat {
    id            Int         @id @default(autoincrement())
    name          String
    desc          String
    level         Int
    prerequisites String[]
    table         FeatTable[]
    type          String
    race          Race?       @relation(fields: [raceId], references: [id])
    raceId        Int?
    subrace       Subrace?    @relation(fields: [subraceId], references: [id])
    subraceId     Int?
    // class level
    // subclass level
}

model Lineage {
    id              Int     @id @default(autoincrement())
    name            String
    settingSpecific Boolean
    races           Race[]
}

model Race {
    id          Int         @id @default(autoincrement())
    name        String
    lineage     Lineage     @relation(fields: [lineageId], references: [id])
    lineageId   Int
    source      String
    desc        String[]
    raceTables  RaceTable[]
    alignment   Alignment   @relation(fields: [alignmentId], references: [id])
    alignmentId Int
    age         Int
    size        String
    speed       Int
    feats       Feat[]
    subraces    Subrace[]
}

model Subrace {
    id     Int      @id @default(autoincrement())
    name   String
    desc   String[]
    feats  Feat[]
    race   Race     @relation(fields: [raceId], references: [id])
    raceId Int
}
