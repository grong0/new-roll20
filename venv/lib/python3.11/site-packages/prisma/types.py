# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']

MetricsFormat = Literal['json', 'prometheus']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List['Serializable'],
    Dict[None, 'Serializable'],
    Dict[bool, 'Serializable'],
    Dict[float, 'Serializable'],
    Dict[int, 'Serializable'],
    Dict[str, 'Serializable'],
]


StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilter'],
        'mode': SortMode,
    },
    total=False,
)



class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilter'],
    },
    total=False,
)



class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilter'],
    },
    total=False,
)



class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilter'],
    },
    total=False,
)



class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilter'],
    },
    total=False,
)



class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilter'],
    },
    total=False,
)



class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilter'],
    },
    total=False,
)



class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Spell types

class SpellOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Spell create method"""
    id: _int
    range: Optional[_str]
    components: Optional[_str]
    duration: Optional[_str]
    description: List[_str]
    list: List[_str]
    upcast: Optional[_str]
    spellLists: List[_str]


class SpellCreateInput(SpellOptionalCreateInput):
    """Required arguments to the Spell create method"""
    name: _str
    source: _str
    school: _str
    level: _str
    castingTime: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SpellOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Spell create method, without relations"""
    id: _int
    range: Optional[_str]
    components: Optional[_str]
    duration: Optional[_str]
    description: List[_str]
    list: List[_str]
    upcast: Optional[_str]
    spellLists: List[_str]


class SpellCreateWithoutRelationsInput(SpellOptionalCreateWithoutRelationsInput):
    """Required arguments to the Spell create method, without relations"""
    name: _str
    source: _str
    school: _str
    level: _str
    castingTime: _str


class SpellCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SpellCreateWithoutRelationsInput'
    connect: 'SpellWhereUniqueInput'


class SpellCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SpellCreateWithoutRelationsInput', List['SpellCreateWithoutRelationsInput']]
    connect: Union['SpellWhereUniqueInput', List['SpellWhereUniqueInput']]


_SpellWhereUnique_id_Input = TypedDict(
    '_SpellWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

SpellWhereUniqueInput = _SpellWhereUnique_id_Input


class SpellUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    source: _str
    school: _str
    level: _str
    castingTime: _str
    range: Optional[_str]
    components: Optional[_str]
    duration: Optional[_str]
    description: 'types.StringListUpdate'
    list: 'types.StringListUpdate'
    upcast: Optional[_str]
    spellLists: 'types.StringListUpdate'


class SpellUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    source: _str
    school: _str
    level: _str
    castingTime: _str
    range: Optional[_str]
    components: Optional[_str]
    duration: Optional[_str]
    description: 'types.StringListUpdate'
    list: 'types.StringListUpdate'
    upcast: Optional[_str]
    spellLists: 'types.StringListUpdate'


class SpellUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SpellCreateWithoutRelationsInput']
    connect: List['SpellWhereUniqueInput']
    set: List['SpellWhereUniqueInput']
    disconnect: List['SpellWhereUniqueInput']
    delete: List['SpellWhereUniqueInput']

    # TODO
    # update: List['SpellUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SpellUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SpellScalarWhereInput']
    # upsert: List['SpellUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['SpellCreateOrConnectWithoutRelationsInput']


class SpellUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SpellCreateWithoutRelationsInput'
    connect: 'SpellWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SpellUpdateInput'
    # upsert: 'SpellUpsertWithoutRelationsInput'
    # connectOrCreate: 'SpellCreateOrConnectWithoutRelationsInput'


class SpellUpsertInput(TypedDict):
    create: 'SpellCreateInput'
    update: 'SpellUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Spell_id_OrderByInput = TypedDict(
    '_Spell_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Spell_name_OrderByInput = TypedDict(
    '_Spell_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Spell_source_OrderByInput = TypedDict(
    '_Spell_source_OrderByInput',
    {
        'source': 'SortOrder',
    },
    total=True
)

_Spell_school_OrderByInput = TypedDict(
    '_Spell_school_OrderByInput',
    {
        'school': 'SortOrder',
    },
    total=True
)

_Spell_level_OrderByInput = TypedDict(
    '_Spell_level_OrderByInput',
    {
        'level': 'SortOrder',
    },
    total=True
)

_Spell_castingTime_OrderByInput = TypedDict(
    '_Spell_castingTime_OrderByInput',
    {
        'castingTime': 'SortOrder',
    },
    total=True
)

_Spell_range_OrderByInput = TypedDict(
    '_Spell_range_OrderByInput',
    {
        'range': 'SortOrder',
    },
    total=True
)

_Spell_components_OrderByInput = TypedDict(
    '_Spell_components_OrderByInput',
    {
        'components': 'SortOrder',
    },
    total=True
)

_Spell_duration_OrderByInput = TypedDict(
    '_Spell_duration_OrderByInput',
    {
        'duration': 'SortOrder',
    },
    total=True
)

_Spell_description_OrderByInput = TypedDict(
    '_Spell_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Spell_list_OrderByInput = TypedDict(
    '_Spell_list_OrderByInput',
    {
        'list': 'SortOrder',
    },
    total=True
)

_Spell_upcast_OrderByInput = TypedDict(
    '_Spell_upcast_OrderByInput',
    {
        'upcast': 'SortOrder',
    },
    total=True
)

_Spell_spellLists_OrderByInput = TypedDict(
    '_Spell_spellLists_OrderByInput',
    {
        'spellLists': 'SortOrder',
    },
    total=True
)

SpellOrderByInput = Union[
    '_Spell_id_OrderByInput',
    '_Spell_name_OrderByInput',
    '_Spell_source_OrderByInput',
    '_Spell_school_OrderByInput',
    '_Spell_level_OrderByInput',
    '_Spell_castingTime_OrderByInput',
    '_Spell_range_OrderByInput',
    '_Spell_components_OrderByInput',
    '_Spell_duration_OrderByInput',
    '_Spell_description_OrderByInput',
    '_Spell_list_OrderByInput',
    '_Spell_upcast_OrderByInput',
    '_Spell_spellLists_OrderByInput',
]



# recursive Spell types
# TODO: cleanup these types



SpellRelationFilter = TypedDict(
    'SpellRelationFilter',
    {
        'is': 'SpellWhereInput',
        'is_not': 'SpellWhereInput',
    },
    total=False,
)


class SpellListRelationFilter(TypedDict, total=False):
    some: 'SpellWhereInput'
    none: 'SpellWhereInput'
    every: 'SpellWhereInput'


class SpellInclude(TypedDict, total=False):
    """Spell relational arguments"""


class SpellIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""


class SpellArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'SpellIncludeFromSpell'


class FindManySpellArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpell'


class LineageIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""
    races: Union[bool, 'FindManyRaceArgsFromSpell']


class LineageArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'LineageIncludeFromLineage'


class FindManyLineageArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['LineageOrderByInput', List['LineageOrderByInput']]
    where: 'LineageWhereInput'
    cursor: 'LineageWhereUniqueInput'
    distinct: List['LineageScalarFieldKeys']
    include: 'LineageIncludeFromLineage'


class RaceIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""
    description: Union[bool, 'DescriptionArgsFromSpell']
    feats: Union[bool, 'FindManyFeatArgsFromSpell']
    subRaces: Union[bool, 'FindManyRaceArgsFromSpell']
    lineage: Union[bool, 'LineageArgsFromSpell']
    parentRace: Union[bool, 'RaceArgsFromSpell']


class RaceArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'RaceIncludeFromRace'


class FindManyRaceArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRace'


class DescriptionIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""
    table: Union[bool, 'TableArgsFromSpell']
    race: Union[bool, 'RaceArgsFromSpell']


class DescriptionArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'DescriptionIncludeFromDescription'


class FindManyDescriptionArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['DescriptionOrderByInput', List['DescriptionOrderByInput']]
    where: 'DescriptionWhereInput'
    cursor: 'DescriptionWhereUniqueInput'
    distinct: List['DescriptionScalarFieldKeys']
    include: 'DescriptionIncludeFromDescription'


class FeatIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""
    table: Union[bool, 'TableArgsFromSpell']
    race: Union[bool, 'RaceArgsFromSpell']


class FeatArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'FeatIncludeFromFeat'


class FindManyFeatArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['FeatOrderByInput', List['FeatOrderByInput']]
    where: 'FeatWhereInput'
    cursor: 'FeatWhereUniqueInput'
    distinct: List['FeatScalarFieldKeys']
    include: 'FeatIncludeFromFeat'


class TableIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""
    rows: Union[bool, 'FindManyRowArgsFromSpell']
    description: Union[bool, 'DescriptionArgsFromSpell']
    feat: Union[bool, 'FeatArgsFromSpell']


class TableArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'TableIncludeFromTable'


class FindManyTableArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['TableOrderByInput', List['TableOrderByInput']]
    where: 'TableWhereInput'
    cursor: 'TableWhereUniqueInput'
    distinct: List['TableScalarFieldKeys']
    include: 'TableIncludeFromTable'


class RowIncludeFromSpell(TypedDict, total=False):
    """Relational arguments for Spell"""
    table: Union[bool, 'TableArgsFromSpell']


class RowArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    include: 'RowIncludeFromRow'


class FindManyRowArgsFromSpell(TypedDict, total=False):
    """Arguments for Spell"""
    take: int
    skip: int
    order_by: Union['RowOrderByInput', List['RowOrderByInput']]
    where: 'RowWhereInput'
    cursor: 'RowWhereUniqueInput'
    distinct: List['RowScalarFieldKeys']
    include: 'RowIncludeFromRow'




FindManySpellArgs = FindManySpellArgsFromSpell
FindFirstSpellArgs = FindManySpellArgsFromSpell


class SpellWhereInput(TypedDict, total=False):
    """Spell arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    source: Union[_str, 'types.StringFilter']
    school: Union[_str, 'types.StringFilter']
    level: Union[_str, 'types.StringFilter']
    castingTime: Union[_str, 'types.StringFilter']
    range: Union[None, _str, 'types.StringFilter']
    components: Union[None, _str, 'types.StringFilter']
    duration: Union[None, _str, 'types.StringFilter']
    description: 'types.StringListFilter'
    list: 'types.StringListFilter'
    upcast: Union[None, _str, 'types.StringFilter']
    spellLists: 'types.StringListFilter'

    # should be noted that AND and NOT should be Union['SpellWhereInput', List['SpellWhereInput']]
    # but this causes mypy to hang :/
    AND: List['SpellWhereInput']
    OR: List['SpellWhereInput']
    NOT: List['SpellWhereInput']



# aggregate Spell types


class SpellScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Spell arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    school: Union[_str, 'types.StringWithAggregatesFilter']
    level: Union[_str, 'types.StringWithAggregatesFilter']
    castingTime: Union[_str, 'types.StringWithAggregatesFilter']
    range: Union[_str, 'types.StringWithAggregatesFilter']
    components: Union[_str, 'types.StringWithAggregatesFilter']
    duration: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    list: Union[_str, 'types.StringWithAggregatesFilter']
    upcast: Union[_str, 'types.StringWithAggregatesFilter']
    spellLists: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['SpellScalarWhereWithAggregatesInput']
    OR: List['SpellScalarWhereWithAggregatesInput']
    NOT: List['SpellScalarWhereWithAggregatesInput']



class SpellGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    source: _str
    school: _str
    level: _str
    castingTime: _str
    range: _str
    components: _str
    duration: _str
    description: List[_str]
    list: List[_str]
    upcast: _str
    spellLists: List[_str]
    _sum: 'SpellSumAggregateOutput'
    _avg: 'SpellAvgAggregateOutput'
    _min: 'SpellMinAggregateOutput'
    _max: 'SpellMaxAggregateOutput'
    _count: 'SpellCountAggregateOutput'


class SpellAvgAggregateOutput(TypedDict, total=False):
    """Spell output for aggregating averages"""
    id: float


class SpellSumAggregateOutput(TypedDict, total=False):
    """Spell output for aggregating sums"""
    id: _int


class SpellScalarAggregateOutput(TypedDict, total=False):
    """Spell output including scalar fields"""
    id: _int
    name: _str
    source: _str
    school: _str
    level: _str
    castingTime: _str
    range: _str
    components: _str
    duration: _str
    description: List[_str]
    list: List[_str]
    upcast: _str
    spellLists: List[_str]


SpellMinAggregateOutput = SpellScalarAggregateOutput
SpellMaxAggregateOutput = SpellScalarAggregateOutput


class SpellMaxAggregateInput(TypedDict, total=False):
    """Spell input for aggregating by max"""
    id: bool
    name: bool
    source: bool
    school: bool
    level: bool
    castingTime: bool
    range: bool
    components: bool
    duration: bool
    description: bool
    list: bool
    upcast: bool
    spellLists: bool


class SpellMinAggregateInput(TypedDict, total=False):
    """Spell input for aggregating by min"""
    id: bool
    name: bool
    source: bool
    school: bool
    level: bool
    castingTime: bool
    range: bool
    components: bool
    duration: bool
    description: bool
    list: bool
    upcast: bool
    spellLists: bool


class SpellNumberAggregateInput(TypedDict, total=False):
    """Spell input for aggregating numbers"""
    id: bool


SpellAvgAggregateInput = SpellNumberAggregateInput
SpellSumAggregateInput = SpellNumberAggregateInput


SpellCountAggregateInput = TypedDict(
    'SpellCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'source': bool,
        'school': bool,
        'level': bool,
        'castingTime': bool,
        'range': bool,
        'components': bool,
        'duration': bool,
        'description': bool,
        'list': bool,
        'upcast': bool,
        'spellLists': bool,
        '_all': bool,
    },
    total=False,
)

SpellCountAggregateOutput = TypedDict(
    'SpellCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'source': int,
        'school': int,
        'level': int,
        'castingTime': int,
        'range': int,
        'components': int,
        'duration': int,
        'description': int,
        'list': int,
        'upcast': int,
        'spellLists': int,
        '_all': int,
    },
    total=False,
)


SpellKeys = Literal[
    'id',
    'name',
    'source',
    'school',
    'level',
    'castingTime',
    'range',
    'components',
    'duration',
    'description',
    'list',
    'upcast',
    'spellLists',
]
SpellScalarFieldKeys = Literal[
    'id',
    'name',
    'source',
    'school',
    'level',
    'castingTime',
    'range',
    'components',
    'duration',
    'description',
    'list',
    'upcast',
    'spellLists',
]
SpellScalarFieldKeysT = TypeVar('SpellScalarFieldKeysT', bound=SpellScalarFieldKeys)

SpellRelationalFieldKeys = _NoneType

# Lineage types

class LineageOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Lineage create method"""
    id: _int
    races: 'RaceCreateManyNestedWithoutRelationsInput'


class LineageCreateInput(LineageOptionalCreateInput):
    """Required arguments to the Lineage create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class LineageOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Lineage create method, without relations"""
    id: _int


class LineageCreateWithoutRelationsInput(LineageOptionalCreateWithoutRelationsInput):
    """Required arguments to the Lineage create method, without relations"""
    name: _str


class LineageCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'LineageCreateWithoutRelationsInput'
    connect: 'LineageWhereUniqueInput'


class LineageCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['LineageCreateWithoutRelationsInput', List['LineageCreateWithoutRelationsInput']]
    connect: Union['LineageWhereUniqueInput', List['LineageWhereUniqueInput']]


_LineageWhereUnique_id_Input = TypedDict(
    '_LineageWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

LineageWhereUniqueInput = _LineageWhereUnique_id_Input


class LineageUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    races: 'RaceUpdateManyWithoutRelationsInput'


class LineageUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str


class LineageUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['LineageCreateWithoutRelationsInput']
    connect: List['LineageWhereUniqueInput']
    set: List['LineageWhereUniqueInput']
    disconnect: List['LineageWhereUniqueInput']
    delete: List['LineageWhereUniqueInput']

    # TODO
    # update: List['LineageUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['LineageUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['LineageScalarWhereInput']
    # upsert: List['LineageUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['LineageCreateOrConnectWithoutRelationsInput']


class LineageUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'LineageCreateWithoutRelationsInput'
    connect: 'LineageWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'LineageUpdateInput'
    # upsert: 'LineageUpsertWithoutRelationsInput'
    # connectOrCreate: 'LineageCreateOrConnectWithoutRelationsInput'


class LineageUpsertInput(TypedDict):
    create: 'LineageCreateInput'
    update: 'LineageUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Lineage_id_OrderByInput = TypedDict(
    '_Lineage_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Lineage_name_OrderByInput = TypedDict(
    '_Lineage_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

LineageOrderByInput = Union[
    '_Lineage_id_OrderByInput',
    '_Lineage_name_OrderByInput',
]



# recursive Lineage types
# TODO: cleanup these types



LineageRelationFilter = TypedDict(
    'LineageRelationFilter',
    {
        'is': 'LineageWhereInput',
        'is_not': 'LineageWhereInput',
    },
    total=False,
)


class LineageListRelationFilter(TypedDict, total=False):
    some: 'LineageWhereInput'
    none: 'LineageWhereInput'
    every: 'LineageWhereInput'


class LineageInclude(TypedDict, total=False):
    """Lineage relational arguments"""
    races: Union[bool, 'FindManyRaceArgsFromLineage']


class SpellIncludeFromLineage(TypedDict, total=False):
    """Relational arguments for Lineage"""


class SpellArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    include: 'SpellIncludeFromSpell'


class FindManySpellArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpell'


class LineageIncludeFromLineage(TypedDict, total=False):
    """Relational arguments for Lineage"""
    races: Union[bool, 'FindManyRaceArgsFromLineage']


class LineageArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    include: 'LineageIncludeFromLineage'


class FindManyLineageArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    take: int
    skip: int
    order_by: Union['LineageOrderByInput', List['LineageOrderByInput']]
    where: 'LineageWhereInput'
    cursor: 'LineageWhereUniqueInput'
    distinct: List['LineageScalarFieldKeys']
    include: 'LineageIncludeFromLineage'


class RaceIncludeFromLineage(TypedDict, total=False):
    """Relational arguments for Lineage"""
    description: Union[bool, 'DescriptionArgsFromLineage']
    feats: Union[bool, 'FindManyFeatArgsFromLineage']
    subRaces: Union[bool, 'FindManyRaceArgsFromLineage']
    lineage: Union[bool, 'LineageArgsFromLineage']
    parentRace: Union[bool, 'RaceArgsFromLineage']


class RaceArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    include: 'RaceIncludeFromRace'


class FindManyRaceArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRace'


class DescriptionIncludeFromLineage(TypedDict, total=False):
    """Relational arguments for Lineage"""
    table: Union[bool, 'TableArgsFromLineage']
    race: Union[bool, 'RaceArgsFromLineage']


class DescriptionArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    include: 'DescriptionIncludeFromDescription'


class FindManyDescriptionArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    take: int
    skip: int
    order_by: Union['DescriptionOrderByInput', List['DescriptionOrderByInput']]
    where: 'DescriptionWhereInput'
    cursor: 'DescriptionWhereUniqueInput'
    distinct: List['DescriptionScalarFieldKeys']
    include: 'DescriptionIncludeFromDescription'


class FeatIncludeFromLineage(TypedDict, total=False):
    """Relational arguments for Lineage"""
    table: Union[bool, 'TableArgsFromLineage']
    race: Union[bool, 'RaceArgsFromLineage']


class FeatArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    include: 'FeatIncludeFromFeat'


class FindManyFeatArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    take: int
    skip: int
    order_by: Union['FeatOrderByInput', List['FeatOrderByInput']]
    where: 'FeatWhereInput'
    cursor: 'FeatWhereUniqueInput'
    distinct: List['FeatScalarFieldKeys']
    include: 'FeatIncludeFromFeat'


class TableIncludeFromLineage(TypedDict, total=False):
    """Relational arguments for Lineage"""
    rows: Union[bool, 'FindManyRowArgsFromLineage']
    description: Union[bool, 'DescriptionArgsFromLineage']
    feat: Union[bool, 'FeatArgsFromLineage']


class TableArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    include: 'TableIncludeFromTable'


class FindManyTableArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    take: int
    skip: int
    order_by: Union['TableOrderByInput', List['TableOrderByInput']]
    where: 'TableWhereInput'
    cursor: 'TableWhereUniqueInput'
    distinct: List['TableScalarFieldKeys']
    include: 'TableIncludeFromTable'


class RowIncludeFromLineage(TypedDict, total=False):
    """Relational arguments for Lineage"""
    table: Union[bool, 'TableArgsFromLineage']


class RowArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    include: 'RowIncludeFromRow'


class FindManyRowArgsFromLineage(TypedDict, total=False):
    """Arguments for Lineage"""
    take: int
    skip: int
    order_by: Union['RowOrderByInput', List['RowOrderByInput']]
    where: 'RowWhereInput'
    cursor: 'RowWhereUniqueInput'
    distinct: List['RowScalarFieldKeys']
    include: 'RowIncludeFromRow'




FindManyLineageArgs = FindManyLineageArgsFromLineage
FindFirstLineageArgs = FindManyLineageArgsFromLineage


class LineageWhereInput(TypedDict, total=False):
    """Lineage arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    races: 'RaceListRelationFilter'

    # should be noted that AND and NOT should be Union['LineageWhereInput', List['LineageWhereInput']]
    # but this causes mypy to hang :/
    AND: List['LineageWhereInput']
    OR: List['LineageWhereInput']
    NOT: List['LineageWhereInput']



# aggregate Lineage types


class LineageScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Lineage arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['LineageScalarWhereWithAggregatesInput']
    OR: List['LineageScalarWhereWithAggregatesInput']
    NOT: List['LineageScalarWhereWithAggregatesInput']



class LineageGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    _sum: 'LineageSumAggregateOutput'
    _avg: 'LineageAvgAggregateOutput'
    _min: 'LineageMinAggregateOutput'
    _max: 'LineageMaxAggregateOutput'
    _count: 'LineageCountAggregateOutput'


class LineageAvgAggregateOutput(TypedDict, total=False):
    """Lineage output for aggregating averages"""
    id: float


class LineageSumAggregateOutput(TypedDict, total=False):
    """Lineage output for aggregating sums"""
    id: _int


class LineageScalarAggregateOutput(TypedDict, total=False):
    """Lineage output including scalar fields"""
    id: _int
    name: _str


LineageMinAggregateOutput = LineageScalarAggregateOutput
LineageMaxAggregateOutput = LineageScalarAggregateOutput


class LineageMaxAggregateInput(TypedDict, total=False):
    """Lineage input for aggregating by max"""
    id: bool
    name: bool


class LineageMinAggregateInput(TypedDict, total=False):
    """Lineage input for aggregating by min"""
    id: bool
    name: bool


class LineageNumberAggregateInput(TypedDict, total=False):
    """Lineage input for aggregating numbers"""
    id: bool


LineageAvgAggregateInput = LineageNumberAggregateInput
LineageSumAggregateInput = LineageNumberAggregateInput


LineageCountAggregateInput = TypedDict(
    'LineageCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

LineageCountAggregateOutput = TypedDict(
    'LineageCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


LineageKeys = Literal[
    'id',
    'name',
    'races',
]
LineageScalarFieldKeys = Literal[
    'id',
    'name',
]
LineageScalarFieldKeysT = TypeVar('LineageScalarFieldKeysT', bound=LineageScalarFieldKeys)

LineageRelationalFieldKeys = Literal[
        'races',
    ]

# Race types

class RaceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Race create method"""
    id: _int
    description: 'DescriptionCreateNestedWithoutRelationsInput'
    feats: 'FeatCreateManyNestedWithoutRelationsInput'
    subRaces: 'RaceCreateManyNestedWithoutRelationsInput'
    lineageId: _int
    lineage: 'LineageCreateNestedWithoutRelationsInput'
    raceId: _int
    parentRace: 'RaceCreateNestedWithoutRelationsInput'


class RaceCreateInput(RaceOptionalCreateInput):
    """Required arguments to the Race create method"""
    name: _str
    source: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RaceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Race create method, without relations"""
    id: _int
    lineageId: _int
    raceId: _int


class RaceCreateWithoutRelationsInput(RaceOptionalCreateWithoutRelationsInput):
    """Required arguments to the Race create method, without relations"""
    name: _str
    source: _str


class RaceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RaceCreateWithoutRelationsInput'
    connect: 'RaceWhereUniqueInput'


class RaceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RaceCreateWithoutRelationsInput', List['RaceCreateWithoutRelationsInput']]
    connect: Union['RaceWhereUniqueInput', List['RaceWhereUniqueInput']]


_RaceWhereUnique_id_Input = TypedDict(
    '_RaceWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_RaceWhereUnique_raceId_Input = TypedDict(
    '_RaceWhereUnique_raceId_Input',
    {
        'raceId': '_int',
    },
    total=True
)

RaceWhereUniqueInput = Union[
    '_RaceWhereUnique_id_Input',
    '_RaceWhereUnique_raceId_Input',
]


class RaceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: 'DescriptionUpdateOneWithoutRelationsInput'
    source: _str
    feats: 'FeatUpdateManyWithoutRelationsInput'
    subRaces: 'RaceUpdateManyWithoutRelationsInput'
    lineage: 'LineageUpdateOneWithoutRelationsInput'
    parentRace: 'RaceUpdateOneWithoutRelationsInput'


class RaceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    source: _str


class RaceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RaceCreateWithoutRelationsInput']
    connect: List['RaceWhereUniqueInput']
    set: List['RaceWhereUniqueInput']
    disconnect: List['RaceWhereUniqueInput']
    delete: List['RaceWhereUniqueInput']

    # TODO
    # update: List['RaceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RaceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RaceScalarWhereInput']
    # upsert: List['RaceUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['RaceCreateOrConnectWithoutRelationsInput']


class RaceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RaceCreateWithoutRelationsInput'
    connect: 'RaceWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RaceUpdateInput'
    # upsert: 'RaceUpsertWithoutRelationsInput'
    # connectOrCreate: 'RaceCreateOrConnectWithoutRelationsInput'


class RaceUpsertInput(TypedDict):
    create: 'RaceCreateInput'
    update: 'RaceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Race_id_OrderByInput = TypedDict(
    '_Race_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Race_name_OrderByInput = TypedDict(
    '_Race_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Race_source_OrderByInput = TypedDict(
    '_Race_source_OrderByInput',
    {
        'source': 'SortOrder',
    },
    total=True
)

_Race_lineageId_OrderByInput = TypedDict(
    '_Race_lineageId_OrderByInput',
    {
        'lineageId': 'SortOrder',
    },
    total=True
)

_Race_raceId_OrderByInput = TypedDict(
    '_Race_raceId_OrderByInput',
    {
        'raceId': 'SortOrder',
    },
    total=True
)

RaceOrderByInput = Union[
    '_Race_id_OrderByInput',
    '_Race_name_OrderByInput',
    '_Race_source_OrderByInput',
    '_Race_lineageId_OrderByInput',
    '_Race_raceId_OrderByInput',
]



# recursive Race types
# TODO: cleanup these types



RaceRelationFilter = TypedDict(
    'RaceRelationFilter',
    {
        'is': 'RaceWhereInput',
        'is_not': 'RaceWhereInput',
    },
    total=False,
)


class RaceListRelationFilter(TypedDict, total=False):
    some: 'RaceWhereInput'
    none: 'RaceWhereInput'
    every: 'RaceWhereInput'


class RaceInclude(TypedDict, total=False):
    """Race relational arguments"""
    description: Union[bool, 'DescriptionArgsFromRace']
    feats: Union[bool, 'FindManyFeatArgsFromRace']
    subRaces: Union[bool, 'FindManyRaceArgsFromRace']
    lineage: Union[bool, 'LineageArgsFromRace']
    parentRace: Union[bool, 'RaceArgsFromRace']


class SpellIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""


class SpellArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'SpellIncludeFromSpell'


class FindManySpellArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpell'


class LineageIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""
    races: Union[bool, 'FindManyRaceArgsFromRace']


class LineageArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'LineageIncludeFromLineage'


class FindManyLineageArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['LineageOrderByInput', List['LineageOrderByInput']]
    where: 'LineageWhereInput'
    cursor: 'LineageWhereUniqueInput'
    distinct: List['LineageScalarFieldKeys']
    include: 'LineageIncludeFromLineage'


class RaceIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""
    description: Union[bool, 'DescriptionArgsFromRace']
    feats: Union[bool, 'FindManyFeatArgsFromRace']
    subRaces: Union[bool, 'FindManyRaceArgsFromRace']
    lineage: Union[bool, 'LineageArgsFromRace']
    parentRace: Union[bool, 'RaceArgsFromRace']


class RaceArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'RaceIncludeFromRace'


class FindManyRaceArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRace'


class DescriptionIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""
    table: Union[bool, 'TableArgsFromRace']
    race: Union[bool, 'RaceArgsFromRace']


class DescriptionArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'DescriptionIncludeFromDescription'


class FindManyDescriptionArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['DescriptionOrderByInput', List['DescriptionOrderByInput']]
    where: 'DescriptionWhereInput'
    cursor: 'DescriptionWhereUniqueInput'
    distinct: List['DescriptionScalarFieldKeys']
    include: 'DescriptionIncludeFromDescription'


class FeatIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""
    table: Union[bool, 'TableArgsFromRace']
    race: Union[bool, 'RaceArgsFromRace']


class FeatArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'FeatIncludeFromFeat'


class FindManyFeatArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['FeatOrderByInput', List['FeatOrderByInput']]
    where: 'FeatWhereInput'
    cursor: 'FeatWhereUniqueInput'
    distinct: List['FeatScalarFieldKeys']
    include: 'FeatIncludeFromFeat'


class TableIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""
    rows: Union[bool, 'FindManyRowArgsFromRace']
    description: Union[bool, 'DescriptionArgsFromRace']
    feat: Union[bool, 'FeatArgsFromRace']


class TableArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'TableIncludeFromTable'


class FindManyTableArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['TableOrderByInput', List['TableOrderByInput']]
    where: 'TableWhereInput'
    cursor: 'TableWhereUniqueInput'
    distinct: List['TableScalarFieldKeys']
    include: 'TableIncludeFromTable'


class RowIncludeFromRace(TypedDict, total=False):
    """Relational arguments for Race"""
    table: Union[bool, 'TableArgsFromRace']


class RowArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    include: 'RowIncludeFromRow'


class FindManyRowArgsFromRace(TypedDict, total=False):
    """Arguments for Race"""
    take: int
    skip: int
    order_by: Union['RowOrderByInput', List['RowOrderByInput']]
    where: 'RowWhereInput'
    cursor: 'RowWhereUniqueInput'
    distinct: List['RowScalarFieldKeys']
    include: 'RowIncludeFromRow'




FindManyRaceArgs = FindManyRaceArgsFromRace
FindFirstRaceArgs = FindManyRaceArgsFromRace


class RaceWhereInput(TypedDict, total=False):
    """Race arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: 'DescriptionRelationFilter'
    source: Union[_str, 'types.StringFilter']
    feats: 'FeatListRelationFilter'
    subRaces: 'RaceListRelationFilter'
    lineageId: Union[_int, 'types.IntFilter']
    lineage: 'LineageRelationFilter'
    raceId: Union[_int, 'types.IntFilter']
    parentRace: 'RaceRelationFilter'

    # should be noted that AND and NOT should be Union['RaceWhereInput', List['RaceWhereInput']]
    # but this causes mypy to hang :/
    AND: List['RaceWhereInput']
    OR: List['RaceWhereInput']
    NOT: List['RaceWhereInput']



# aggregate Race types


class RaceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Race arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    source: Union[_str, 'types.StringWithAggregatesFilter']
    lineageId: Union[_int, 'types.IntWithAggregatesFilter']
    raceId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['RaceScalarWhereWithAggregatesInput']
    OR: List['RaceScalarWhereWithAggregatesInput']
    NOT: List['RaceScalarWhereWithAggregatesInput']



class RaceGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    source: _str
    lineageId: _int
    raceId: _int
    _sum: 'RaceSumAggregateOutput'
    _avg: 'RaceAvgAggregateOutput'
    _min: 'RaceMinAggregateOutput'
    _max: 'RaceMaxAggregateOutput'
    _count: 'RaceCountAggregateOutput'


class RaceAvgAggregateOutput(TypedDict, total=False):
    """Race output for aggregating averages"""
    id: float
    lineageId: float
    raceId: float


class RaceSumAggregateOutput(TypedDict, total=False):
    """Race output for aggregating sums"""
    id: _int
    lineageId: _int
    raceId: _int


class RaceScalarAggregateOutput(TypedDict, total=False):
    """Race output including scalar fields"""
    id: _int
    name: _str
    source: _str
    lineageId: _int
    raceId: _int


RaceMinAggregateOutput = RaceScalarAggregateOutput
RaceMaxAggregateOutput = RaceScalarAggregateOutput


class RaceMaxAggregateInput(TypedDict, total=False):
    """Race input for aggregating by max"""
    id: bool
    name: bool
    source: bool
    lineageId: bool
    raceId: bool


class RaceMinAggregateInput(TypedDict, total=False):
    """Race input for aggregating by min"""
    id: bool
    name: bool
    source: bool
    lineageId: bool
    raceId: bool


class RaceNumberAggregateInput(TypedDict, total=False):
    """Race input for aggregating numbers"""
    id: bool
    lineageId: bool
    raceId: bool


RaceAvgAggregateInput = RaceNumberAggregateInput
RaceSumAggregateInput = RaceNumberAggregateInput


RaceCountAggregateInput = TypedDict(
    'RaceCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'source': bool,
        'lineageId': bool,
        'raceId': bool,
        '_all': bool,
    },
    total=False,
)

RaceCountAggregateOutput = TypedDict(
    'RaceCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'source': int,
        'lineageId': int,
        'raceId': int,
        '_all': int,
    },
    total=False,
)


RaceKeys = Literal[
    'id',
    'name',
    'description',
    'source',
    'feats',
    'subRaces',
    'lineageId',
    'lineage',
    'raceId',
    'parentRace',
]
RaceScalarFieldKeys = Literal[
    'id',
    'name',
    'source',
    'lineageId',
    'raceId',
]
RaceScalarFieldKeysT = TypeVar('RaceScalarFieldKeysT', bound=RaceScalarFieldKeys)

RaceRelationalFieldKeys = Literal[
        'description',
        'feats',
        'subRaces',
        'lineage',
        'parentRace',
    ]

# Description types

class DescriptionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Description create method"""
    id: _int
    content: List[_str]
    table: 'TableCreateNestedWithoutRelationsInput'
    raceId: _int
    race: 'RaceCreateNestedWithoutRelationsInput'


class DescriptionCreateInput(DescriptionOptionalCreateInput):
    """Required arguments to the Description create method"""
    indent: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DescriptionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Description create method, without relations"""
    id: _int
    content: List[_str]
    raceId: _int


class DescriptionCreateWithoutRelationsInput(DescriptionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Description create method, without relations"""
    indent: _int


class DescriptionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DescriptionCreateWithoutRelationsInput'
    connect: 'DescriptionWhereUniqueInput'


class DescriptionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DescriptionCreateWithoutRelationsInput', List['DescriptionCreateWithoutRelationsInput']]
    connect: Union['DescriptionWhereUniqueInput', List['DescriptionWhereUniqueInput']]


_DescriptionWhereUnique_id_Input = TypedDict(
    '_DescriptionWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_DescriptionWhereUnique_raceId_Input = TypedDict(
    '_DescriptionWhereUnique_raceId_Input',
    {
        'raceId': '_int',
    },
    total=True
)

DescriptionWhereUniqueInput = Union[
    '_DescriptionWhereUnique_id_Input',
    '_DescriptionWhereUnique_raceId_Input',
]


class DescriptionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    indent: Union[AtomicIntInput, _int]
    content: 'types.StringListUpdate'
    table: 'TableUpdateOneWithoutRelationsInput'
    race: 'RaceUpdateOneWithoutRelationsInput'


class DescriptionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    indent: Union[AtomicIntInput, _int]
    content: 'types.StringListUpdate'


class DescriptionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DescriptionCreateWithoutRelationsInput']
    connect: List['DescriptionWhereUniqueInput']
    set: List['DescriptionWhereUniqueInput']
    disconnect: List['DescriptionWhereUniqueInput']
    delete: List['DescriptionWhereUniqueInput']

    # TODO
    # update: List['DescriptionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DescriptionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DescriptionScalarWhereInput']
    # upsert: List['DescriptionUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['DescriptionCreateOrConnectWithoutRelationsInput']


class DescriptionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DescriptionCreateWithoutRelationsInput'
    connect: 'DescriptionWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DescriptionUpdateInput'
    # upsert: 'DescriptionUpsertWithoutRelationsInput'
    # connectOrCreate: 'DescriptionCreateOrConnectWithoutRelationsInput'


class DescriptionUpsertInput(TypedDict):
    create: 'DescriptionCreateInput'
    update: 'DescriptionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Description_id_OrderByInput = TypedDict(
    '_Description_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Description_indent_OrderByInput = TypedDict(
    '_Description_indent_OrderByInput',
    {
        'indent': 'SortOrder',
    },
    total=True
)

_Description_content_OrderByInput = TypedDict(
    '_Description_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Description_raceId_OrderByInput = TypedDict(
    '_Description_raceId_OrderByInput',
    {
        'raceId': 'SortOrder',
    },
    total=True
)

DescriptionOrderByInput = Union[
    '_Description_id_OrderByInput',
    '_Description_indent_OrderByInput',
    '_Description_content_OrderByInput',
    '_Description_raceId_OrderByInput',
]



# recursive Description types
# TODO: cleanup these types



DescriptionRelationFilter = TypedDict(
    'DescriptionRelationFilter',
    {
        'is': 'DescriptionWhereInput',
        'is_not': 'DescriptionWhereInput',
    },
    total=False,
)


class DescriptionListRelationFilter(TypedDict, total=False):
    some: 'DescriptionWhereInput'
    none: 'DescriptionWhereInput'
    every: 'DescriptionWhereInput'


class DescriptionInclude(TypedDict, total=False):
    """Description relational arguments"""
    table: Union[bool, 'TableArgsFromDescription']
    race: Union[bool, 'RaceArgsFromDescription']


class SpellIncludeFromDescription(TypedDict, total=False):
    """Relational arguments for Description"""


class SpellArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    include: 'SpellIncludeFromSpell'


class FindManySpellArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpell'


class LineageIncludeFromDescription(TypedDict, total=False):
    """Relational arguments for Description"""
    races: Union[bool, 'FindManyRaceArgsFromDescription']


class LineageArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    include: 'LineageIncludeFromLineage'


class FindManyLineageArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    take: int
    skip: int
    order_by: Union['LineageOrderByInput', List['LineageOrderByInput']]
    where: 'LineageWhereInput'
    cursor: 'LineageWhereUniqueInput'
    distinct: List['LineageScalarFieldKeys']
    include: 'LineageIncludeFromLineage'


class RaceIncludeFromDescription(TypedDict, total=False):
    """Relational arguments for Description"""
    description: Union[bool, 'DescriptionArgsFromDescription']
    feats: Union[bool, 'FindManyFeatArgsFromDescription']
    subRaces: Union[bool, 'FindManyRaceArgsFromDescription']
    lineage: Union[bool, 'LineageArgsFromDescription']
    parentRace: Union[bool, 'RaceArgsFromDescription']


class RaceArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    include: 'RaceIncludeFromRace'


class FindManyRaceArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRace'


class DescriptionIncludeFromDescription(TypedDict, total=False):
    """Relational arguments for Description"""
    table: Union[bool, 'TableArgsFromDescription']
    race: Union[bool, 'RaceArgsFromDescription']


class DescriptionArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    include: 'DescriptionIncludeFromDescription'


class FindManyDescriptionArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    take: int
    skip: int
    order_by: Union['DescriptionOrderByInput', List['DescriptionOrderByInput']]
    where: 'DescriptionWhereInput'
    cursor: 'DescriptionWhereUniqueInput'
    distinct: List['DescriptionScalarFieldKeys']
    include: 'DescriptionIncludeFromDescription'


class FeatIncludeFromDescription(TypedDict, total=False):
    """Relational arguments for Description"""
    table: Union[bool, 'TableArgsFromDescription']
    race: Union[bool, 'RaceArgsFromDescription']


class FeatArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    include: 'FeatIncludeFromFeat'


class FindManyFeatArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    take: int
    skip: int
    order_by: Union['FeatOrderByInput', List['FeatOrderByInput']]
    where: 'FeatWhereInput'
    cursor: 'FeatWhereUniqueInput'
    distinct: List['FeatScalarFieldKeys']
    include: 'FeatIncludeFromFeat'


class TableIncludeFromDescription(TypedDict, total=False):
    """Relational arguments for Description"""
    rows: Union[bool, 'FindManyRowArgsFromDescription']
    description: Union[bool, 'DescriptionArgsFromDescription']
    feat: Union[bool, 'FeatArgsFromDescription']


class TableArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    include: 'TableIncludeFromTable'


class FindManyTableArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    take: int
    skip: int
    order_by: Union['TableOrderByInput', List['TableOrderByInput']]
    where: 'TableWhereInput'
    cursor: 'TableWhereUniqueInput'
    distinct: List['TableScalarFieldKeys']
    include: 'TableIncludeFromTable'


class RowIncludeFromDescription(TypedDict, total=False):
    """Relational arguments for Description"""
    table: Union[bool, 'TableArgsFromDescription']


class RowArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    include: 'RowIncludeFromRow'


class FindManyRowArgsFromDescription(TypedDict, total=False):
    """Arguments for Description"""
    take: int
    skip: int
    order_by: Union['RowOrderByInput', List['RowOrderByInput']]
    where: 'RowWhereInput'
    cursor: 'RowWhereUniqueInput'
    distinct: List['RowScalarFieldKeys']
    include: 'RowIncludeFromRow'




FindManyDescriptionArgs = FindManyDescriptionArgsFromDescription
FindFirstDescriptionArgs = FindManyDescriptionArgsFromDescription


class DescriptionWhereInput(TypedDict, total=False):
    """Description arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    indent: Union[_int, 'types.IntFilter']
    content: 'types.StringListFilter'
    table: 'TableRelationFilter'
    raceId: Union[_int, 'types.IntFilter']
    race: 'RaceRelationFilter'

    # should be noted that AND and NOT should be Union['DescriptionWhereInput', List['DescriptionWhereInput']]
    # but this causes mypy to hang :/
    AND: List['DescriptionWhereInput']
    OR: List['DescriptionWhereInput']
    NOT: List['DescriptionWhereInput']



# aggregate Description types


class DescriptionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Description arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    indent: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    raceId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['DescriptionScalarWhereWithAggregatesInput']
    OR: List['DescriptionScalarWhereWithAggregatesInput']
    NOT: List['DescriptionScalarWhereWithAggregatesInput']



class DescriptionGroupByOutput(TypedDict, total=False):
    id: _int
    indent: _int
    content: List[_str]
    raceId: _int
    _sum: 'DescriptionSumAggregateOutput'
    _avg: 'DescriptionAvgAggregateOutput'
    _min: 'DescriptionMinAggregateOutput'
    _max: 'DescriptionMaxAggregateOutput'
    _count: 'DescriptionCountAggregateOutput'


class DescriptionAvgAggregateOutput(TypedDict, total=False):
    """Description output for aggregating averages"""
    id: float
    indent: float
    raceId: float


class DescriptionSumAggregateOutput(TypedDict, total=False):
    """Description output for aggregating sums"""
    id: _int
    indent: _int
    raceId: _int


class DescriptionScalarAggregateOutput(TypedDict, total=False):
    """Description output including scalar fields"""
    id: _int
    indent: _int
    content: List[_str]
    raceId: _int


DescriptionMinAggregateOutput = DescriptionScalarAggregateOutput
DescriptionMaxAggregateOutput = DescriptionScalarAggregateOutput


class DescriptionMaxAggregateInput(TypedDict, total=False):
    """Description input for aggregating by max"""
    id: bool
    indent: bool
    content: bool
    raceId: bool


class DescriptionMinAggregateInput(TypedDict, total=False):
    """Description input for aggregating by min"""
    id: bool
    indent: bool
    content: bool
    raceId: bool


class DescriptionNumberAggregateInput(TypedDict, total=False):
    """Description input for aggregating numbers"""
    id: bool
    indent: bool
    raceId: bool


DescriptionAvgAggregateInput = DescriptionNumberAggregateInput
DescriptionSumAggregateInput = DescriptionNumberAggregateInput


DescriptionCountAggregateInput = TypedDict(
    'DescriptionCountAggregateInput',
    {
        'id': bool,
        'indent': bool,
        'content': bool,
        'raceId': bool,
        '_all': bool,
    },
    total=False,
)

DescriptionCountAggregateOutput = TypedDict(
    'DescriptionCountAggregateOutput',
    {
        'id': int,
        'indent': int,
        'content': int,
        'raceId': int,
        '_all': int,
    },
    total=False,
)


DescriptionKeys = Literal[
    'id',
    'indent',
    'content',
    'table',
    'raceId',
    'race',
]
DescriptionScalarFieldKeys = Literal[
    'id',
    'indent',
    'content',
    'raceId',
]
DescriptionScalarFieldKeysT = TypeVar('DescriptionScalarFieldKeysT', bound=DescriptionScalarFieldKeys)

DescriptionRelationalFieldKeys = Literal[
        'table',
        'race',
    ]

# Feat types

class FeatOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Feat create method"""
    id: _int
    table: 'TableCreateNestedWithoutRelationsInput'
    raceId: _int
    race: 'RaceCreateNestedWithoutRelationsInput'


class FeatCreateInput(FeatOptionalCreateInput):
    """Required arguments to the Feat create method"""
    name: _str
    description: _str
    indent: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class FeatOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Feat create method, without relations"""
    id: _int
    raceId: _int


class FeatCreateWithoutRelationsInput(FeatOptionalCreateWithoutRelationsInput):
    """Required arguments to the Feat create method, without relations"""
    name: _str
    description: _str
    indent: _int


class FeatCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'FeatCreateWithoutRelationsInput'
    connect: 'FeatWhereUniqueInput'


class FeatCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['FeatCreateWithoutRelationsInput', List['FeatCreateWithoutRelationsInput']]
    connect: Union['FeatWhereUniqueInput', List['FeatWhereUniqueInput']]


_FeatWhereUnique_id_Input = TypedDict(
    '_FeatWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_FeatWhereUnique_raceId_Input = TypedDict(
    '_FeatWhereUnique_raceId_Input',
    {
        'raceId': '_int',
    },
    total=True
)

FeatWhereUniqueInput = Union[
    '_FeatWhereUnique_id_Input',
    '_FeatWhereUnique_raceId_Input',
]


class FeatUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: _str
    indent: Union[AtomicIntInput, _int]
    table: 'TableUpdateOneWithoutRelationsInput'
    race: 'RaceUpdateOneWithoutRelationsInput'


class FeatUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: _str
    indent: Union[AtomicIntInput, _int]


class FeatUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['FeatCreateWithoutRelationsInput']
    connect: List['FeatWhereUniqueInput']
    set: List['FeatWhereUniqueInput']
    disconnect: List['FeatWhereUniqueInput']
    delete: List['FeatWhereUniqueInput']

    # TODO
    # update: List['FeatUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['FeatUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['FeatScalarWhereInput']
    # upsert: List['FeatUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['FeatCreateOrConnectWithoutRelationsInput']


class FeatUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'FeatCreateWithoutRelationsInput'
    connect: 'FeatWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'FeatUpdateInput'
    # upsert: 'FeatUpsertWithoutRelationsInput'
    # connectOrCreate: 'FeatCreateOrConnectWithoutRelationsInput'


class FeatUpsertInput(TypedDict):
    create: 'FeatCreateInput'
    update: 'FeatUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Feat_id_OrderByInput = TypedDict(
    '_Feat_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Feat_name_OrderByInput = TypedDict(
    '_Feat_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Feat_description_OrderByInput = TypedDict(
    '_Feat_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Feat_indent_OrderByInput = TypedDict(
    '_Feat_indent_OrderByInput',
    {
        'indent': 'SortOrder',
    },
    total=True
)

_Feat_raceId_OrderByInput = TypedDict(
    '_Feat_raceId_OrderByInput',
    {
        'raceId': 'SortOrder',
    },
    total=True
)

FeatOrderByInput = Union[
    '_Feat_id_OrderByInput',
    '_Feat_name_OrderByInput',
    '_Feat_description_OrderByInput',
    '_Feat_indent_OrderByInput',
    '_Feat_raceId_OrderByInput',
]



# recursive Feat types
# TODO: cleanup these types



FeatRelationFilter = TypedDict(
    'FeatRelationFilter',
    {
        'is': 'FeatWhereInput',
        'is_not': 'FeatWhereInput',
    },
    total=False,
)


class FeatListRelationFilter(TypedDict, total=False):
    some: 'FeatWhereInput'
    none: 'FeatWhereInput'
    every: 'FeatWhereInput'


class FeatInclude(TypedDict, total=False):
    """Feat relational arguments"""
    table: Union[bool, 'TableArgsFromFeat']
    race: Union[bool, 'RaceArgsFromFeat']


class SpellIncludeFromFeat(TypedDict, total=False):
    """Relational arguments for Feat"""


class SpellArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    include: 'SpellIncludeFromSpell'


class FindManySpellArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpell'


class LineageIncludeFromFeat(TypedDict, total=False):
    """Relational arguments for Feat"""
    races: Union[bool, 'FindManyRaceArgsFromFeat']


class LineageArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    include: 'LineageIncludeFromLineage'


class FindManyLineageArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    take: int
    skip: int
    order_by: Union['LineageOrderByInput', List['LineageOrderByInput']]
    where: 'LineageWhereInput'
    cursor: 'LineageWhereUniqueInput'
    distinct: List['LineageScalarFieldKeys']
    include: 'LineageIncludeFromLineage'


class RaceIncludeFromFeat(TypedDict, total=False):
    """Relational arguments for Feat"""
    description: Union[bool, 'DescriptionArgsFromFeat']
    feats: Union[bool, 'FindManyFeatArgsFromFeat']
    subRaces: Union[bool, 'FindManyRaceArgsFromFeat']
    lineage: Union[bool, 'LineageArgsFromFeat']
    parentRace: Union[bool, 'RaceArgsFromFeat']


class RaceArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    include: 'RaceIncludeFromRace'


class FindManyRaceArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRace'


class DescriptionIncludeFromFeat(TypedDict, total=False):
    """Relational arguments for Feat"""
    table: Union[bool, 'TableArgsFromFeat']
    race: Union[bool, 'RaceArgsFromFeat']


class DescriptionArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    include: 'DescriptionIncludeFromDescription'


class FindManyDescriptionArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    take: int
    skip: int
    order_by: Union['DescriptionOrderByInput', List['DescriptionOrderByInput']]
    where: 'DescriptionWhereInput'
    cursor: 'DescriptionWhereUniqueInput'
    distinct: List['DescriptionScalarFieldKeys']
    include: 'DescriptionIncludeFromDescription'


class FeatIncludeFromFeat(TypedDict, total=False):
    """Relational arguments for Feat"""
    table: Union[bool, 'TableArgsFromFeat']
    race: Union[bool, 'RaceArgsFromFeat']


class FeatArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    include: 'FeatIncludeFromFeat'


class FindManyFeatArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    take: int
    skip: int
    order_by: Union['FeatOrderByInput', List['FeatOrderByInput']]
    where: 'FeatWhereInput'
    cursor: 'FeatWhereUniqueInput'
    distinct: List['FeatScalarFieldKeys']
    include: 'FeatIncludeFromFeat'


class TableIncludeFromFeat(TypedDict, total=False):
    """Relational arguments for Feat"""
    rows: Union[bool, 'FindManyRowArgsFromFeat']
    description: Union[bool, 'DescriptionArgsFromFeat']
    feat: Union[bool, 'FeatArgsFromFeat']


class TableArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    include: 'TableIncludeFromTable'


class FindManyTableArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    take: int
    skip: int
    order_by: Union['TableOrderByInput', List['TableOrderByInput']]
    where: 'TableWhereInput'
    cursor: 'TableWhereUniqueInput'
    distinct: List['TableScalarFieldKeys']
    include: 'TableIncludeFromTable'


class RowIncludeFromFeat(TypedDict, total=False):
    """Relational arguments for Feat"""
    table: Union[bool, 'TableArgsFromFeat']


class RowArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    include: 'RowIncludeFromRow'


class FindManyRowArgsFromFeat(TypedDict, total=False):
    """Arguments for Feat"""
    take: int
    skip: int
    order_by: Union['RowOrderByInput', List['RowOrderByInput']]
    where: 'RowWhereInput'
    cursor: 'RowWhereUniqueInput'
    distinct: List['RowScalarFieldKeys']
    include: 'RowIncludeFromRow'




FindManyFeatArgs = FindManyFeatArgsFromFeat
FindFirstFeatArgs = FindManyFeatArgsFromFeat


class FeatWhereInput(TypedDict, total=False):
    """Feat arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    indent: Union[_int, 'types.IntFilter']
    table: 'TableRelationFilter'
    raceId: Union[_int, 'types.IntFilter']
    race: 'RaceRelationFilter'

    # should be noted that AND and NOT should be Union['FeatWhereInput', List['FeatWhereInput']]
    # but this causes mypy to hang :/
    AND: List['FeatWhereInput']
    OR: List['FeatWhereInput']
    NOT: List['FeatWhereInput']



# aggregate Feat types


class FeatScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Feat arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    indent: Union[_int, 'types.IntWithAggregatesFilter']
    raceId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['FeatScalarWhereWithAggregatesInput']
    OR: List['FeatScalarWhereWithAggregatesInput']
    NOT: List['FeatScalarWhereWithAggregatesInput']



class FeatGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    description: _str
    indent: _int
    raceId: _int
    _sum: 'FeatSumAggregateOutput'
    _avg: 'FeatAvgAggregateOutput'
    _min: 'FeatMinAggregateOutput'
    _max: 'FeatMaxAggregateOutput'
    _count: 'FeatCountAggregateOutput'


class FeatAvgAggregateOutput(TypedDict, total=False):
    """Feat output for aggregating averages"""
    id: float
    indent: float
    raceId: float


class FeatSumAggregateOutput(TypedDict, total=False):
    """Feat output for aggregating sums"""
    id: _int
    indent: _int
    raceId: _int


class FeatScalarAggregateOutput(TypedDict, total=False):
    """Feat output including scalar fields"""
    id: _int
    name: _str
    description: _str
    indent: _int
    raceId: _int


FeatMinAggregateOutput = FeatScalarAggregateOutput
FeatMaxAggregateOutput = FeatScalarAggregateOutput


class FeatMaxAggregateInput(TypedDict, total=False):
    """Feat input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    indent: bool
    raceId: bool


class FeatMinAggregateInput(TypedDict, total=False):
    """Feat input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    indent: bool
    raceId: bool


class FeatNumberAggregateInput(TypedDict, total=False):
    """Feat input for aggregating numbers"""
    id: bool
    indent: bool
    raceId: bool


FeatAvgAggregateInput = FeatNumberAggregateInput
FeatSumAggregateInput = FeatNumberAggregateInput


FeatCountAggregateInput = TypedDict(
    'FeatCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'indent': bool,
        'raceId': bool,
        '_all': bool,
    },
    total=False,
)

FeatCountAggregateOutput = TypedDict(
    'FeatCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'indent': int,
        'raceId': int,
        '_all': int,
    },
    total=False,
)


FeatKeys = Literal[
    'id',
    'name',
    'description',
    'indent',
    'table',
    'raceId',
    'race',
]
FeatScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'indent',
    'raceId',
]
FeatScalarFieldKeysT = TypeVar('FeatScalarFieldKeysT', bound=FeatScalarFieldKeys)

FeatRelationalFieldKeys = Literal[
        'table',
        'race',
    ]

# Table types

class TableOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Table create method"""
    id: _int
    name: Optional[_str]
    header: List[_str]
    rows: 'RowCreateManyNestedWithoutRelationsInput'
    descriptionId: _int
    description: 'DescriptionCreateNestedWithoutRelationsInput'
    featId: _int
    feat: 'FeatCreateNestedWithoutRelationsInput'


class TableCreateInput(TableOptionalCreateInput):
    """Required arguments to the Table create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TableOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Table create method, without relations"""
    id: _int
    name: Optional[_str]
    header: List[_str]
    descriptionId: _int
    featId: _int


class TableCreateWithoutRelationsInput(TableOptionalCreateWithoutRelationsInput):
    """Required arguments to the Table create method, without relations"""


class TableCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TableCreateWithoutRelationsInput'
    connect: 'TableWhereUniqueInput'


class TableCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TableCreateWithoutRelationsInput', List['TableCreateWithoutRelationsInput']]
    connect: Union['TableWhereUniqueInput', List['TableWhereUniqueInput']]


_TableWhereUnique_id_Input = TypedDict(
    '_TableWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_TableWhereUnique_descriptionId_Input = TypedDict(
    '_TableWhereUnique_descriptionId_Input',
    {
        'descriptionId': '_int',
    },
    total=True
)

_TableWhereUnique_featId_Input = TypedDict(
    '_TableWhereUnique_featId_Input',
    {
        'featId': '_int',
    },
    total=True
)

TableWhereUniqueInput = Union[
    '_TableWhereUnique_id_Input',
    '_TableWhereUnique_descriptionId_Input',
    '_TableWhereUnique_featId_Input',
]


class TableUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: Optional[_str]
    header: 'types.StringListUpdate'
    rows: 'RowUpdateManyWithoutRelationsInput'
    description: 'DescriptionUpdateOneWithoutRelationsInput'
    feat: 'FeatUpdateOneWithoutRelationsInput'


class TableUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: Optional[_str]
    header: 'types.StringListUpdate'


class TableUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TableCreateWithoutRelationsInput']
    connect: List['TableWhereUniqueInput']
    set: List['TableWhereUniqueInput']
    disconnect: List['TableWhereUniqueInput']
    delete: List['TableWhereUniqueInput']

    # TODO
    # update: List['TableUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TableUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TableScalarWhereInput']
    # upsert: List['TableUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['TableCreateOrConnectWithoutRelationsInput']


class TableUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TableCreateWithoutRelationsInput'
    connect: 'TableWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TableUpdateInput'
    # upsert: 'TableUpsertWithoutRelationsInput'
    # connectOrCreate: 'TableCreateOrConnectWithoutRelationsInput'


class TableUpsertInput(TypedDict):
    create: 'TableCreateInput'
    update: 'TableUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Table_id_OrderByInput = TypedDict(
    '_Table_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Table_name_OrderByInput = TypedDict(
    '_Table_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Table_header_OrderByInput = TypedDict(
    '_Table_header_OrderByInput',
    {
        'header': 'SortOrder',
    },
    total=True
)

_Table_descriptionId_OrderByInput = TypedDict(
    '_Table_descriptionId_OrderByInput',
    {
        'descriptionId': 'SortOrder',
    },
    total=True
)

_Table_featId_OrderByInput = TypedDict(
    '_Table_featId_OrderByInput',
    {
        'featId': 'SortOrder',
    },
    total=True
)

TableOrderByInput = Union[
    '_Table_id_OrderByInput',
    '_Table_name_OrderByInput',
    '_Table_header_OrderByInput',
    '_Table_descriptionId_OrderByInput',
    '_Table_featId_OrderByInput',
]



# recursive Table types
# TODO: cleanup these types



TableRelationFilter = TypedDict(
    'TableRelationFilter',
    {
        'is': 'TableWhereInput',
        'is_not': 'TableWhereInput',
    },
    total=False,
)


class TableListRelationFilter(TypedDict, total=False):
    some: 'TableWhereInput'
    none: 'TableWhereInput'
    every: 'TableWhereInput'


class TableInclude(TypedDict, total=False):
    """Table relational arguments"""
    rows: Union[bool, 'FindManyRowArgsFromTable']
    description: Union[bool, 'DescriptionArgsFromTable']
    feat: Union[bool, 'FeatArgsFromTable']


class SpellIncludeFromTable(TypedDict, total=False):
    """Relational arguments for Table"""


class SpellArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    include: 'SpellIncludeFromSpell'


class FindManySpellArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpell'


class LineageIncludeFromTable(TypedDict, total=False):
    """Relational arguments for Table"""
    races: Union[bool, 'FindManyRaceArgsFromTable']


class LineageArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    include: 'LineageIncludeFromLineage'


class FindManyLineageArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    take: int
    skip: int
    order_by: Union['LineageOrderByInput', List['LineageOrderByInput']]
    where: 'LineageWhereInput'
    cursor: 'LineageWhereUniqueInput'
    distinct: List['LineageScalarFieldKeys']
    include: 'LineageIncludeFromLineage'


class RaceIncludeFromTable(TypedDict, total=False):
    """Relational arguments for Table"""
    description: Union[bool, 'DescriptionArgsFromTable']
    feats: Union[bool, 'FindManyFeatArgsFromTable']
    subRaces: Union[bool, 'FindManyRaceArgsFromTable']
    lineage: Union[bool, 'LineageArgsFromTable']
    parentRace: Union[bool, 'RaceArgsFromTable']


class RaceArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    include: 'RaceIncludeFromRace'


class FindManyRaceArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRace'


class DescriptionIncludeFromTable(TypedDict, total=False):
    """Relational arguments for Table"""
    table: Union[bool, 'TableArgsFromTable']
    race: Union[bool, 'RaceArgsFromTable']


class DescriptionArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    include: 'DescriptionIncludeFromDescription'


class FindManyDescriptionArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    take: int
    skip: int
    order_by: Union['DescriptionOrderByInput', List['DescriptionOrderByInput']]
    where: 'DescriptionWhereInput'
    cursor: 'DescriptionWhereUniqueInput'
    distinct: List['DescriptionScalarFieldKeys']
    include: 'DescriptionIncludeFromDescription'


class FeatIncludeFromTable(TypedDict, total=False):
    """Relational arguments for Table"""
    table: Union[bool, 'TableArgsFromTable']
    race: Union[bool, 'RaceArgsFromTable']


class FeatArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    include: 'FeatIncludeFromFeat'


class FindManyFeatArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    take: int
    skip: int
    order_by: Union['FeatOrderByInput', List['FeatOrderByInput']]
    where: 'FeatWhereInput'
    cursor: 'FeatWhereUniqueInput'
    distinct: List['FeatScalarFieldKeys']
    include: 'FeatIncludeFromFeat'


class TableIncludeFromTable(TypedDict, total=False):
    """Relational arguments for Table"""
    rows: Union[bool, 'FindManyRowArgsFromTable']
    description: Union[bool, 'DescriptionArgsFromTable']
    feat: Union[bool, 'FeatArgsFromTable']


class TableArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    include: 'TableIncludeFromTable'


class FindManyTableArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    take: int
    skip: int
    order_by: Union['TableOrderByInput', List['TableOrderByInput']]
    where: 'TableWhereInput'
    cursor: 'TableWhereUniqueInput'
    distinct: List['TableScalarFieldKeys']
    include: 'TableIncludeFromTable'


class RowIncludeFromTable(TypedDict, total=False):
    """Relational arguments for Table"""
    table: Union[bool, 'TableArgsFromTable']


class RowArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    include: 'RowIncludeFromRow'


class FindManyRowArgsFromTable(TypedDict, total=False):
    """Arguments for Table"""
    take: int
    skip: int
    order_by: Union['RowOrderByInput', List['RowOrderByInput']]
    where: 'RowWhereInput'
    cursor: 'RowWhereUniqueInput'
    distinct: List['RowScalarFieldKeys']
    include: 'RowIncludeFromRow'




FindManyTableArgs = FindManyTableArgsFromTable
FindFirstTableArgs = FindManyTableArgsFromTable


class TableWhereInput(TypedDict, total=False):
    """Table arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[None, _str, 'types.StringFilter']
    header: 'types.StringListFilter'
    rows: 'RowListRelationFilter'
    descriptionId: Union[_int, 'types.IntFilter']
    description: 'DescriptionRelationFilter'
    featId: Union[_int, 'types.IntFilter']
    feat: 'FeatRelationFilter'

    # should be noted that AND and NOT should be Union['TableWhereInput', List['TableWhereInput']]
    # but this causes mypy to hang :/
    AND: List['TableWhereInput']
    OR: List['TableWhereInput']
    NOT: List['TableWhereInput']



# aggregate Table types


class TableScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Table arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    header: Union[_str, 'types.StringWithAggregatesFilter']
    descriptionId: Union[_int, 'types.IntWithAggregatesFilter']
    featId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TableScalarWhereWithAggregatesInput']
    OR: List['TableScalarWhereWithAggregatesInput']
    NOT: List['TableScalarWhereWithAggregatesInput']



class TableGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    header: List[_str]
    descriptionId: _int
    featId: _int
    _sum: 'TableSumAggregateOutput'
    _avg: 'TableAvgAggregateOutput'
    _min: 'TableMinAggregateOutput'
    _max: 'TableMaxAggregateOutput'
    _count: 'TableCountAggregateOutput'


class TableAvgAggregateOutput(TypedDict, total=False):
    """Table output for aggregating averages"""
    id: float
    descriptionId: float
    featId: float


class TableSumAggregateOutput(TypedDict, total=False):
    """Table output for aggregating sums"""
    id: _int
    descriptionId: _int
    featId: _int


class TableScalarAggregateOutput(TypedDict, total=False):
    """Table output including scalar fields"""
    id: _int
    name: _str
    header: List[_str]
    descriptionId: _int
    featId: _int


TableMinAggregateOutput = TableScalarAggregateOutput
TableMaxAggregateOutput = TableScalarAggregateOutput


class TableMaxAggregateInput(TypedDict, total=False):
    """Table input for aggregating by max"""
    id: bool
    name: bool
    header: bool
    descriptionId: bool
    featId: bool


class TableMinAggregateInput(TypedDict, total=False):
    """Table input for aggregating by min"""
    id: bool
    name: bool
    header: bool
    descriptionId: bool
    featId: bool


class TableNumberAggregateInput(TypedDict, total=False):
    """Table input for aggregating numbers"""
    id: bool
    descriptionId: bool
    featId: bool


TableAvgAggregateInput = TableNumberAggregateInput
TableSumAggregateInput = TableNumberAggregateInput


TableCountAggregateInput = TypedDict(
    'TableCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'header': bool,
        'descriptionId': bool,
        'featId': bool,
        '_all': bool,
    },
    total=False,
)

TableCountAggregateOutput = TypedDict(
    'TableCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'header': int,
        'descriptionId': int,
        'featId': int,
        '_all': int,
    },
    total=False,
)


TableKeys = Literal[
    'id',
    'name',
    'header',
    'rows',
    'descriptionId',
    'description',
    'featId',
    'feat',
]
TableScalarFieldKeys = Literal[
    'id',
    'name',
    'header',
    'descriptionId',
    'featId',
]
TableScalarFieldKeysT = TypeVar('TableScalarFieldKeysT', bound=TableScalarFieldKeys)

TableRelationalFieldKeys = Literal[
        'rows',
        'description',
        'feat',
    ]

# Row types

class RowOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Row create method"""
    id: _int
    content: List[_str]
    tableId: _int
    table: 'TableCreateNestedWithoutRelationsInput'


class RowCreateInput(RowOptionalCreateInput):
    """Required arguments to the Row create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RowOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Row create method, without relations"""
    id: _int
    content: List[_str]
    tableId: _int


class RowCreateWithoutRelationsInput(RowOptionalCreateWithoutRelationsInput):
    """Required arguments to the Row create method, without relations"""


class RowCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RowCreateWithoutRelationsInput'
    connect: 'RowWhereUniqueInput'


class RowCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RowCreateWithoutRelationsInput', List['RowCreateWithoutRelationsInput']]
    connect: Union['RowWhereUniqueInput', List['RowWhereUniqueInput']]


_RowWhereUnique_id_Input = TypedDict(
    '_RowWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_RowWhereUnique_tableId_Input = TypedDict(
    '_RowWhereUnique_tableId_Input',
    {
        'tableId': '_int',
    },
    total=True
)

RowWhereUniqueInput = Union[
    '_RowWhereUnique_id_Input',
    '_RowWhereUnique_tableId_Input',
]


class RowUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    content: 'types.StringListUpdate'
    table: 'TableUpdateOneWithoutRelationsInput'


class RowUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    content: 'types.StringListUpdate'


class RowUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RowCreateWithoutRelationsInput']
    connect: List['RowWhereUniqueInput']
    set: List['RowWhereUniqueInput']
    disconnect: List['RowWhereUniqueInput']
    delete: List['RowWhereUniqueInput']

    # TODO
    # update: List['RowUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RowUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RowScalarWhereInput']
    # upsert: List['RowUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['RowCreateOrConnectWithoutRelationsInput']


class RowUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RowCreateWithoutRelationsInput'
    connect: 'RowWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RowUpdateInput'
    # upsert: 'RowUpsertWithoutRelationsInput'
    # connectOrCreate: 'RowCreateOrConnectWithoutRelationsInput'


class RowUpsertInput(TypedDict):
    create: 'RowCreateInput'
    update: 'RowUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Row_id_OrderByInput = TypedDict(
    '_Row_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Row_content_OrderByInput = TypedDict(
    '_Row_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Row_tableId_OrderByInput = TypedDict(
    '_Row_tableId_OrderByInput',
    {
        'tableId': 'SortOrder',
    },
    total=True
)

RowOrderByInput = Union[
    '_Row_id_OrderByInput',
    '_Row_content_OrderByInput',
    '_Row_tableId_OrderByInput',
]



# recursive Row types
# TODO: cleanup these types



RowRelationFilter = TypedDict(
    'RowRelationFilter',
    {
        'is': 'RowWhereInput',
        'is_not': 'RowWhereInput',
    },
    total=False,
)


class RowListRelationFilter(TypedDict, total=False):
    some: 'RowWhereInput'
    none: 'RowWhereInput'
    every: 'RowWhereInput'


class RowInclude(TypedDict, total=False):
    """Row relational arguments"""
    table: Union[bool, 'TableArgsFromRow']


class SpellIncludeFromRow(TypedDict, total=False):
    """Relational arguments for Row"""


class SpellArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    include: 'SpellIncludeFromSpell'


class FindManySpellArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    take: int
    skip: int
    order_by: Union['SpellOrderByInput', List['SpellOrderByInput']]
    where: 'SpellWhereInput'
    cursor: 'SpellWhereUniqueInput'
    distinct: List['SpellScalarFieldKeys']
    include: 'SpellIncludeFromSpell'


class LineageIncludeFromRow(TypedDict, total=False):
    """Relational arguments for Row"""
    races: Union[bool, 'FindManyRaceArgsFromRow']


class LineageArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    include: 'LineageIncludeFromLineage'


class FindManyLineageArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    take: int
    skip: int
    order_by: Union['LineageOrderByInput', List['LineageOrderByInput']]
    where: 'LineageWhereInput'
    cursor: 'LineageWhereUniqueInput'
    distinct: List['LineageScalarFieldKeys']
    include: 'LineageIncludeFromLineage'


class RaceIncludeFromRow(TypedDict, total=False):
    """Relational arguments for Row"""
    description: Union[bool, 'DescriptionArgsFromRow']
    feats: Union[bool, 'FindManyFeatArgsFromRow']
    subRaces: Union[bool, 'FindManyRaceArgsFromRow']
    lineage: Union[bool, 'LineageArgsFromRow']
    parentRace: Union[bool, 'RaceArgsFromRow']


class RaceArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    include: 'RaceIncludeFromRace'


class FindManyRaceArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    take: int
    skip: int
    order_by: Union['RaceOrderByInput', List['RaceOrderByInput']]
    where: 'RaceWhereInput'
    cursor: 'RaceWhereUniqueInput'
    distinct: List['RaceScalarFieldKeys']
    include: 'RaceIncludeFromRace'


class DescriptionIncludeFromRow(TypedDict, total=False):
    """Relational arguments for Row"""
    table: Union[bool, 'TableArgsFromRow']
    race: Union[bool, 'RaceArgsFromRow']


class DescriptionArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    include: 'DescriptionIncludeFromDescription'


class FindManyDescriptionArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    take: int
    skip: int
    order_by: Union['DescriptionOrderByInput', List['DescriptionOrderByInput']]
    where: 'DescriptionWhereInput'
    cursor: 'DescriptionWhereUniqueInput'
    distinct: List['DescriptionScalarFieldKeys']
    include: 'DescriptionIncludeFromDescription'


class FeatIncludeFromRow(TypedDict, total=False):
    """Relational arguments for Row"""
    table: Union[bool, 'TableArgsFromRow']
    race: Union[bool, 'RaceArgsFromRow']


class FeatArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    include: 'FeatIncludeFromFeat'


class FindManyFeatArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    take: int
    skip: int
    order_by: Union['FeatOrderByInput', List['FeatOrderByInput']]
    where: 'FeatWhereInput'
    cursor: 'FeatWhereUniqueInput'
    distinct: List['FeatScalarFieldKeys']
    include: 'FeatIncludeFromFeat'


class TableIncludeFromRow(TypedDict, total=False):
    """Relational arguments for Row"""
    rows: Union[bool, 'FindManyRowArgsFromRow']
    description: Union[bool, 'DescriptionArgsFromRow']
    feat: Union[bool, 'FeatArgsFromRow']


class TableArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    include: 'TableIncludeFromTable'


class FindManyTableArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    take: int
    skip: int
    order_by: Union['TableOrderByInput', List['TableOrderByInput']]
    where: 'TableWhereInput'
    cursor: 'TableWhereUniqueInput'
    distinct: List['TableScalarFieldKeys']
    include: 'TableIncludeFromTable'


class RowIncludeFromRow(TypedDict, total=False):
    """Relational arguments for Row"""
    table: Union[bool, 'TableArgsFromRow']


class RowArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    include: 'RowIncludeFromRow'


class FindManyRowArgsFromRow(TypedDict, total=False):
    """Arguments for Row"""
    take: int
    skip: int
    order_by: Union['RowOrderByInput', List['RowOrderByInput']]
    where: 'RowWhereInput'
    cursor: 'RowWhereUniqueInput'
    distinct: List['RowScalarFieldKeys']
    include: 'RowIncludeFromRow'




FindManyRowArgs = FindManyRowArgsFromRow
FindFirstRowArgs = FindManyRowArgsFromRow


class RowWhereInput(TypedDict, total=False):
    """Row arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: 'types.StringListFilter'
    tableId: Union[_int, 'types.IntFilter']
    table: 'TableRelationFilter'

    # should be noted that AND and NOT should be Union['RowWhereInput', List['RowWhereInput']]
    # but this causes mypy to hang :/
    AND: List['RowWhereInput']
    OR: List['RowWhereInput']
    NOT: List['RowWhereInput']



# aggregate Row types


class RowScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Row arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    tableId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['RowScalarWhereWithAggregatesInput']
    OR: List['RowScalarWhereWithAggregatesInput']
    NOT: List['RowScalarWhereWithAggregatesInput']



class RowGroupByOutput(TypedDict, total=False):
    id: _int
    content: List[_str]
    tableId: _int
    _sum: 'RowSumAggregateOutput'
    _avg: 'RowAvgAggregateOutput'
    _min: 'RowMinAggregateOutput'
    _max: 'RowMaxAggregateOutput'
    _count: 'RowCountAggregateOutput'


class RowAvgAggregateOutput(TypedDict, total=False):
    """Row output for aggregating averages"""
    id: float
    tableId: float


class RowSumAggregateOutput(TypedDict, total=False):
    """Row output for aggregating sums"""
    id: _int
    tableId: _int


class RowScalarAggregateOutput(TypedDict, total=False):
    """Row output including scalar fields"""
    id: _int
    content: List[_str]
    tableId: _int


RowMinAggregateOutput = RowScalarAggregateOutput
RowMaxAggregateOutput = RowScalarAggregateOutput


class RowMaxAggregateInput(TypedDict, total=False):
    """Row input for aggregating by max"""
    id: bool
    content: bool
    tableId: bool


class RowMinAggregateInput(TypedDict, total=False):
    """Row input for aggregating by min"""
    id: bool
    content: bool
    tableId: bool


class RowNumberAggregateInput(TypedDict, total=False):
    """Row input for aggregating numbers"""
    id: bool
    tableId: bool


RowAvgAggregateInput = RowNumberAggregateInput
RowSumAggregateInput = RowNumberAggregateInput


RowCountAggregateInput = TypedDict(
    'RowCountAggregateInput',
    {
        'id': bool,
        'content': bool,
        'tableId': bool,
        '_all': bool,
    },
    total=False,
)

RowCountAggregateOutput = TypedDict(
    'RowCountAggregateOutput',
    {
        'id': int,
        'content': int,
        'tableId': int,
        '_all': int,
    },
    total=False,
)


RowKeys = Literal[
    'id',
    'content',
    'tableId',
    'table',
]
RowScalarFieldKeys = Literal[
    'id',
    'content',
    'tableId',
]
RowScalarFieldKeysT = TypeVar('RowScalarFieldKeysT', bound=RowScalarFieldKeys)

RowRelationalFieldKeys = Literal[
        'table',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields