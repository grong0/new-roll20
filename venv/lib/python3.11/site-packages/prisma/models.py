# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template models.py.jinja --
import os
import logging
import inspect
import warnings
from collections import OrderedDict

from pydantic import BaseModel, Field

from . import types, enums, errors, fields, bases
from ._types import FuncType
from ._compat import model_rebuild, field_validator
from .builder import serialize_base64
from .generator import partial_models_ctx, PartialModelField


log: logging.Logger = logging.getLogger(__name__)
_created_partial_types: Set[str] = set()

class Spell(bases.BaseSpell):
    """Represents a Spell record"""

    id: _int
    name: _str
    source: _str
    school: _str
    level: _str
    castingTime: _str
    range: Optional[_str] = None
    components: Optional[_str] = None
    duration: Optional[_str] = None
    description: List[_str]
    list: List[_str]
    upcast: Optional[_str] = None
    spellLists: List[_str]


    @field_validator('description', 'list', 'spellLists', pre=True, allow_reuse=True)
    @classmethod
    def _transform_required_list_fields(cls, value: object) -> object:
        # When using raw queries, some databases will return `None` for an array field that has not been set yet.
        #
        # In our case we want to use an empty list instead as that is the internal Prisma behaviour and we want
        # to use the same consistent structure between the core ORM and raw queries. For example, if we updated
        # our type definitions to include `None` for `List` fields then it would be misleading as it will only
        # ever be `None` in raw queries.
        if value is None:
            return []

        return value

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.SpellKeys']] = None,
        exclude: Optional[Iterable['types.SpellKeys']] = None,
        required: Optional[Iterable['types.SpellKeys']] = None,
        optional: Optional[Iterable['types.SpellKeys']] = None,
        relations: Optional[Mapping['types.SpellRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.SpellKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Spell_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Spell_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Spell_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Spell_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "Spell" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Spell / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Spell',
            }
        )
        _created_partial_types.add(name)


class Lineage(bases.BaseLineage):
    """Represents a Lineage record"""

    id: _int
    name: _str
    races: Optional[List['models.Race']] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.LineageKeys']] = None,
        exclude: Optional[Iterable['types.LineageKeys']] = None,
        required: Optional[Iterable['types.LineageKeys']] = None,
        optional: Optional[Iterable['types.LineageKeys']] = None,
        relations: Optional[Mapping['types.LineageRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.LineageKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Lineage_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Lineage_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Lineage_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Lineage_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Lineage_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Lineage_relational_fields:
                        raise errors.UnknownRelationalFieldError('Lineage', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Lineage / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Lineage',
            }
        )
        _created_partial_types.add(name)


class Race(bases.BaseRace):
    """Represents a Race record"""

    id: _int
    name: _str
    description: Optional['models.Description'] = None
    source: _str
    feats: Optional[List['models.Feat']] = None
    subRaces: Optional[List['models.Race']] = None
    lineageId: _int
    lineage: Optional['models.Lineage'] = None
    raceId: _int
    parentRace: Optional['models.Race'] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.RaceKeys']] = None,
        exclude: Optional[Iterable['types.RaceKeys']] = None,
        required: Optional[Iterable['types.RaceKeys']] = None,
        optional: Optional[Iterable['types.RaceKeys']] = None,
        relations: Optional[Mapping['types.RaceRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.RaceKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Race_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Race_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Race_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Race_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Race_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Race_relational_fields:
                        raise errors.UnknownRelationalFieldError('Race', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Race / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Race',
            }
        )
        _created_partial_types.add(name)


class Description(bases.BaseDescription):
    """Represents a Description record"""

    id: _int
    indent: _int
    content: List[_str]
    table: Optional['models.Table'] = None
    raceId: _int
    race: Optional['models.Race'] = None


    @field_validator('content', pre=True, allow_reuse=True)
    @classmethod
    def _transform_required_list_fields(cls, value: object) -> object:
        # When using raw queries, some databases will return `None` for an array field that has not been set yet.
        #
        # In our case we want to use an empty list instead as that is the internal Prisma behaviour and we want
        # to use the same consistent structure between the core ORM and raw queries. For example, if we updated
        # our type definitions to include `None` for `List` fields then it would be misleading as it will only
        # ever be `None` in raw queries.
        if value is None:
            return []

        return value

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.DescriptionKeys']] = None,
        exclude: Optional[Iterable['types.DescriptionKeys']] = None,
        required: Optional[Iterable['types.DescriptionKeys']] = None,
        optional: Optional[Iterable['types.DescriptionKeys']] = None,
        relations: Optional[Mapping['types.DescriptionRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.DescriptionKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Description_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Description_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Description_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Description_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Description_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Description_relational_fields:
                        raise errors.UnknownRelationalFieldError('Description', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Description / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Description',
            }
        )
        _created_partial_types.add(name)


class Feat(bases.BaseFeat):
    """Represents a Feat record"""

    id: _int
    name: _str
    description: _str
    indent: _int
    table: Optional['models.Table'] = None
    raceId: _int
    race: Optional['models.Race'] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.FeatKeys']] = None,
        exclude: Optional[Iterable['types.FeatKeys']] = None,
        required: Optional[Iterable['types.FeatKeys']] = None,
        optional: Optional[Iterable['types.FeatKeys']] = None,
        relations: Optional[Mapping['types.FeatRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.FeatKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Feat_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Feat_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Feat_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Feat_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Feat_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Feat_relational_fields:
                        raise errors.UnknownRelationalFieldError('Feat', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Feat / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Feat',
            }
        )
        _created_partial_types.add(name)


class Table(bases.BaseTable):
    """Represents a Table record"""

    id: _int
    name: Optional[_str] = None
    header: List[_str]
    rows: Optional[List['models.Row']] = None
    descriptionId: _int
    description: Optional['models.Description'] = None
    featId: _int
    feat: Optional['models.Feat'] = None


    @field_validator('header', pre=True, allow_reuse=True)
    @classmethod
    def _transform_required_list_fields(cls, value: object) -> object:
        # When using raw queries, some databases will return `None` for an array field that has not been set yet.
        #
        # In our case we want to use an empty list instead as that is the internal Prisma behaviour and we want
        # to use the same consistent structure between the core ORM and raw queries. For example, if we updated
        # our type definitions to include `None` for `List` fields then it would be misleading as it will only
        # ever be `None` in raw queries.
        if value is None:
            return []

        return value

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.TableKeys']] = None,
        exclude: Optional[Iterable['types.TableKeys']] = None,
        required: Optional[Iterable['types.TableKeys']] = None,
        optional: Optional[Iterable['types.TableKeys']] = None,
        relations: Optional[Mapping['types.TableRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.TableKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Table_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Table_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Table_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Table_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Table_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Table_relational_fields:
                        raise errors.UnknownRelationalFieldError('Table', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Table / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Table',
            }
        )
        _created_partial_types.add(name)


class Row(bases.BaseRow):
    """Represents a Row record"""

    id: _int
    content: List[_str]
    tableId: _int
    table: Optional['models.Table'] = None


    @field_validator('content', pre=True, allow_reuse=True)
    @classmethod
    def _transform_required_list_fields(cls, value: object) -> object:
        # When using raw queries, some databases will return `None` for an array field that has not been set yet.
        #
        # In our case we want to use an empty list instead as that is the internal Prisma behaviour and we want
        # to use the same consistent structure between the core ORM and raw queries. For example, if we updated
        # our type definitions to include `None` for `List` fields then it would be misleading as it will only
        # ever be `None` in raw queries.
        if value is None:
            return []

        return value

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.RowKeys']] = None,
        exclude: Optional[Iterable['types.RowKeys']] = None,
        required: Optional[Iterable['types.RowKeys']] = None,
        optional: Optional[Iterable['types.RowKeys']] = None,
        relations: Optional[Mapping['types.RowRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.RowKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Row_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Row_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Row_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Row_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Row_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Row_relational_fields:
                        raise errors.UnknownRelationalFieldError('Row', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Row / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'Row',
            }
        )
        _created_partial_types.add(name)



_Spell_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_Spell_fields: Dict['types.SpellKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('source', {
            'name': 'source',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('school', {
            'name': 'school',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('level', {
            'name': 'level',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('castingTime', {
            'name': 'castingTime',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('range', {
            'name': 'range',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('components', {
            'name': 'components',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('duration', {
            'name': 'duration',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('list', {
            'name': 'list',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('upcast', {
            'name': 'upcast',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('spellLists', {
            'name': 'spellLists',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_Lineage_relational_fields: Set[str] = {
        'races',
    }
_Lineage_fields: Dict['types.LineageKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('races', {
            'name': 'races',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Race\']',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Race_relational_fields: Set[str] = {
        'description',
        'feats',
        'subRaces',
        'lineage',
        'parentRace',
    }
_Race_fields: Dict['types.RaceKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': True,
            'type': 'models.Description',
            'is_relational': True,
            'documentation': None,
        }),
        ('source', {
            'name': 'source',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('feats', {
            'name': 'feats',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Feat\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('subRaces', {
            'name': 'subRaces',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Race\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('lineageId', {
            'name': 'lineageId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('lineage', {
            'name': 'lineage',
            'is_list': False,
            'optional': True,
            'type': 'models.Lineage',
            'is_relational': True,
            'documentation': None,
        }),
        ('raceId', {
            'name': 'raceId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('parentRace', {
            'name': 'parentRace',
            'is_list': False,
            'optional': True,
            'type': 'models.Race',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Description_relational_fields: Set[str] = {
        'table',
        'race',
    }
_Description_fields: Dict['types.DescriptionKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('indent', {
            'name': 'indent',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('content', {
            'name': 'content',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('table', {
            'name': 'table',
            'is_list': False,
            'optional': True,
            'type': 'models.Table',
            'is_relational': True,
            'documentation': None,
        }),
        ('raceId', {
            'name': 'raceId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('race', {
            'name': 'race',
            'is_list': False,
            'optional': True,
            'type': 'models.Race',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Feat_relational_fields: Set[str] = {
        'table',
        'race',
    }
_Feat_fields: Dict['types.FeatKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('indent', {
            'name': 'indent',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('table', {
            'name': 'table',
            'is_list': False,
            'optional': True,
            'type': 'models.Table',
            'is_relational': True,
            'documentation': None,
        }),
        ('raceId', {
            'name': 'raceId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('race', {
            'name': 'race',
            'is_list': False,
            'optional': True,
            'type': 'models.Race',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Table_relational_fields: Set[str] = {
        'rows',
        'description',
        'feat',
    }
_Table_fields: Dict['types.TableKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('header', {
            'name': 'header',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('rows', {
            'name': 'rows',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Row\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('descriptionId', {
            'name': 'descriptionId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('description', {
            'name': 'description',
            'is_list': False,
            'optional': True,
            'type': 'models.Description',
            'is_relational': True,
            'documentation': None,
        }),
        ('featId', {
            'name': 'featId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('feat', {
            'name': 'feat',
            'is_list': False,
            'optional': True,
            'type': 'models.Feat',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_Row_relational_fields: Set[str] = {
        'table',
    }
_Row_fields: Dict['types.RowKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('content', {
            'name': 'content',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'is_relational': False,
            'documentation': None,
        }),
        ('tableId', {
            'name': 'tableId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('table', {
            'name': 'table',
            'is_list': False,
            'optional': True,
            'type': 'models.Table',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)



# we have to import ourselves as relation types are namespaced to models
# e.g. models.Post
from . import models, actions

# required to support relationships between models
model_rebuild(Spell)
model_rebuild(Lineage)
model_rebuild(Race)
model_rebuild(Description)
model_rebuild(Feat)
model_rebuild(Table)
model_rebuild(Row)
